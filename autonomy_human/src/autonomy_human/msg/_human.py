"""autogenerated by genpy from autonomy_human/human.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sensor_msgs.msg
import std_msgs.msg

class human(genpy.Message):
  _md5sum = "b1101ef84b709757da9ca210281612a1"
  _type = "autonomy_human/human"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

uint32 numFaces
sensor_msgs/RegionOfInterest faceROI
uint32 faceScore
float32[2] flowScore

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: sensor_msgs/RegionOfInterest
# This message is used to specify a region of interest within an image.
#
# When used to specify the ROI setting of the camera when the image was
# taken, the height and width fields should either match the height and
# width fields for the associated image; or height = width = 0
# indicates that the full resolution image was captured.

uint32 x_offset  # Leftmost pixel of the ROI
                 # (0 if the ROI includes the left edge of the image)
uint32 y_offset  # Topmost pixel of the ROI
                 # (0 if the ROI includes the top edge of the image)
uint32 height    # Height of ROI
uint32 width     # Width of ROI

# True if a distinct rectified ROI should be calculated from the "raw"
# ROI in this message. Typically this should be False if the full image
# is captured (ROI not used), and True if a subwindow is captured (ROI
# used).
bool do_rectify

"""
  __slots__ = ['header','numFaces','faceROI','faceScore','flowScore']
  _slot_types = ['std_msgs/Header','uint32','sensor_msgs/RegionOfInterest','uint32','float32[2]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,numFaces,faceROI,faceScore,flowScore

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(human, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.numFaces is None:
        self.numFaces = 0
      if self.faceROI is None:
        self.faceROI = sensor_msgs.msg.RegionOfInterest()
      if self.faceScore is None:
        self.faceScore = 0
      if self.flowScore is None:
        self.flowScore = [0.,0.]
    else:
      self.header = std_msgs.msg.Header()
      self.numFaces = 0
      self.faceROI = sensor_msgs.msg.RegionOfInterest()
      self.faceScore = 0
      self.flowScore = [0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5IBI.pack(_x.numFaces, _x.faceROI.x_offset, _x.faceROI.y_offset, _x.faceROI.height, _x.faceROI.width, _x.faceROI.do_rectify, _x.faceScore))
      buff.write(_struct_2f.pack(*self.flowScore))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.faceROI is None:
        self.faceROI = sensor_msgs.msg.RegionOfInterest()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.numFaces, _x.faceROI.x_offset, _x.faceROI.y_offset, _x.faceROI.height, _x.faceROI.width, _x.faceROI.do_rectify, _x.faceScore,) = _struct_5IBI.unpack(str[start:end])
      self.faceROI.do_rectify = bool(self.faceROI.do_rectify)
      start = end
      end += 8
      self.flowScore = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5IBI.pack(_x.numFaces, _x.faceROI.x_offset, _x.faceROI.y_offset, _x.faceROI.height, _x.faceROI.width, _x.faceROI.do_rectify, _x.faceScore))
      buff.write(self.flowScore.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.faceROI is None:
        self.faceROI = sensor_msgs.msg.RegionOfInterest()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.numFaces, _x.faceROI.x_offset, _x.faceROI.y_offset, _x.faceROI.height, _x.faceROI.width, _x.faceROI.do_rectify, _x.faceScore,) = _struct_5IBI.unpack(str[start:end])
      self.faceROI.do_rectify = bool(self.faceROI.do_rectify)
      start = end
      end += 8
      self.flowScore = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_5IBI = struct.Struct("<5IBI")
_struct_2f = struct.Struct("<2f")
