/* Auto-generated by genmsg_cpp for file /home/autolab/ros/stacks/autonomy_hri/autonomy_human/msg/human.msg */
#ifndef AUTONOMY_HUMAN_MESSAGE_HUMAN_H
#define AUTONOMY_HUMAN_MESSAGE_HUMAN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "sensor_msgs/RegionOfInterest.h"

namespace autonomy_human
{
template <class ContainerAllocator>
struct human_ {
  typedef human_<ContainerAllocator> Type;

  human_()
  : header()
  , numFaces(0)
  , faceROI()
  , faceScore(0)
  , flowScore()
  {
    flowScore.assign(0.0);
  }

  human_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , numFaces(0)
  , faceROI(_alloc)
  , faceScore(0)
  , flowScore()
  {
    flowScore.assign(0.0);
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint32_t _numFaces_type;
  uint32_t numFaces;

  typedef  ::sensor_msgs::RegionOfInterest_<ContainerAllocator>  _faceROI_type;
   ::sensor_msgs::RegionOfInterest_<ContainerAllocator>  faceROI;

  typedef uint32_t _faceScore_type;
  uint32_t faceScore;

  typedef boost::array<float, 2>  _flowScore_type;
  boost::array<float, 2>  flowScore;


  typedef boost::shared_ptr< ::autonomy_human::human_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonomy_human::human_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct human
typedef  ::autonomy_human::human_<std::allocator<void> > human;

typedef boost::shared_ptr< ::autonomy_human::human> humanPtr;
typedef boost::shared_ptr< ::autonomy_human::human const> humanConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonomy_human::human_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonomy_human::human_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonomy_human

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonomy_human::human_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonomy_human::human_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonomy_human::human_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b1101ef84b709757da9ca210281612a1";
  }

  static const char* value(const  ::autonomy_human::human_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb1101ef84b709757ULL;
  static const uint64_t static_value2 = 0xda9ca210281612a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonomy_human::human_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonomy_human/human";
  }

  static const char* value(const  ::autonomy_human::human_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonomy_human::human_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
uint32 numFaces\n\
sensor_msgs/RegionOfInterest faceROI\n\
uint32 faceScore\n\
float32[2] flowScore\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/RegionOfInterest\n\
# This message is used to specify a region of interest within an image.\n\
#\n\
# When used to specify the ROI setting of the camera when the image was\n\
# taken, the height and width fields should either match the height and\n\
# width fields for the associated image; or height = width = 0\n\
# indicates that the full resolution image was captured.\n\
\n\
uint32 x_offset  # Leftmost pixel of the ROI\n\
                 # (0 if the ROI includes the left edge of the image)\n\
uint32 y_offset  # Topmost pixel of the ROI\n\
                 # (0 if the ROI includes the top edge of the image)\n\
uint32 height    # Height of ROI\n\
uint32 width     # Width of ROI\n\
\n\
# True if a distinct rectified ROI should be calculated from the \"raw\"\n\
# ROI in this message. Typically this should be False if the full image\n\
# is captured (ROI not used), and True if a subwindow is captured (ROI\n\
# used).\n\
bool do_rectify\n\
\n\
";
  }

  static const char* value(const  ::autonomy_human::human_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::autonomy_human::human_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::autonomy_human::human_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonomy_human::human_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.numFaces);
    stream.next(m.faceROI);
    stream.next(m.faceScore);
    stream.next(m.flowScore);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct human_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonomy_human::human_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonomy_human::human_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "numFaces: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.numFaces);
    s << indent << "faceROI: ";
s << std::endl;
    Printer< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >::stream(s, indent + "  ", v.faceROI);
    s << indent << "faceScore: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.faceScore);
    s << indent << "flowScore[]" << std::endl;
    for (size_t i = 0; i < v.flowScore.size(); ++i)
    {
      s << indent << "  flowScore[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.flowScore[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONOMY_HUMAN_MESSAGE_HUMAN_H

